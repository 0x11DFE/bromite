From: thermatk <thermatk@thermatk.com>
Date: Fri, 22 Jun 2018 17:13:38 +0200
Subject: kill remaining Play Services checks

---
 .../chromium/chrome/browser/ChromeVersionInfo.java | 10 +-------
 .../browser/externalauth/ExternalAuthUtils.java    | 28 +++++++---------------
 .../externalauth/UserRecoverableErrorHandler.java  | 10 --------
 .../chrome/browser/omaha/UpdateMenuItemHelper.java | 10 +-------
 chrome/android/java_sources.gni                    |  3 ---
 .../components/signin/AccountIdProvider.java       | 10 +-------
 .../signin/GmsAvailabilityException.java           |  4 +---
 .../signin/SystemAccountManagerDelegate.java       | 18 +++-----------
 .../shape_detection/FaceDetectionProviderImpl.java |  8 +------
 9 files changed, 16 insertions(+), 85 deletions(-)

diff --git a/chrome/android/java/src/org/chromium/chrome/browser/ChromeVersionInfo.java b/chrome/android/java/src/org/chromium/chrome/browser/ChromeVersionInfo.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/ChromeVersionInfo.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/ChromeVersionInfo.java
@@ -7,8 +7,6 @@ package org.chromium.chrome.browser;
 import android.content.Context;
 import android.content.pm.PackageManager;
 
-import com.google.android.gms.common.GoogleApiAvailability;
-
 import org.chromium.base.ContextUtils;
 import org.chromium.base.annotations.CalledByNative;
 import org.chromium.chrome.browser.externalauth.ExternalAuthUtils;
@@ -88,7 +86,7 @@ public class ChromeVersionInfo {
     public static String getGmsInfo() {
         Context context = ContextUtils.getApplicationContext();
 
-        final long sdkVersion = GoogleApiAvailability.GOOGLE_PLAY_SERVICES_VERSION_CODE;
+        final long sdkVersion = 0L;
         final long installedGmsVersion = getPlayServicesApkVersionNumber(context);
 
         final String accessType;
@@ -105,12 +103,6 @@ public class ChromeVersionInfo {
     }
 
     private static long getPlayServicesApkVersionNumber(Context context) {
-        try {
-            return context.getPackageManager()
-                    .getPackageInfo(GoogleApiAvailability.GOOGLE_PLAY_SERVICES_PACKAGE, 0)
-                    .versionCode;
-        } catch (PackageManager.NameNotFoundException e) {
             return 0;
-        }
     }
 }
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/externalauth/ExternalAuthUtils.java b/chrome/android/java/src/org/chromium/chrome/browser/externalauth/ExternalAuthUtils.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/externalauth/ExternalAuthUtils.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/externalauth/ExternalAuthUtils.java
@@ -15,9 +15,6 @@ import android.os.SystemClock;
 import android.support.annotation.WorkerThread;
 import android.text.TextUtils;
 
-import com.google.android.gms.common.ConnectionResult;
-import com.google.android.gms.common.GoogleApiAvailability;
-
 import org.chromium.base.ContextUtils;
 import org.chromium.base.Log;
 import org.chromium.base.ThreadUtils;
@@ -164,9 +161,10 @@ public class ExternalAuthUtils {
      *         when it is updating.
      */
     public boolean isGooglePlayServicesMissing(final Context context) {
-        final int resultCode = checkGooglePlayServicesAvailable(context);
+/*        final int resultCode = checkGooglePlayServicesAvailable(context);
         return (resultCode == ConnectionResult.SERVICE_MISSING
-                || resultCode == ConnectionResult.SERVICE_INVALID);
+                || resultCode == ConnectionResult.SERVICE_INVALID); */
+        return true;
     }
 
     /**
@@ -181,7 +179,7 @@ public class ExternalAuthUtils {
      * @return true if and only if Google Play Services can be used
      */
     public boolean canUseGooglePlayServices(final UserRecoverableErrorHandler errorHandler) {
-        Context context = ContextUtils.getApplicationContext();
+/*        Context context = ContextUtils.getApplicationContext();
         final int resultCode = checkGooglePlayServicesAvailable(context);
         recordConnectionResult(resultCode);
         if (resultCode == ConnectionResult.SUCCESS) return true;
@@ -195,7 +193,7 @@ public class ExternalAuthUtils {
                 }
             };
             ThreadUtils.runOnUiThread(errorHandlerTask);
-        }
+        } */
         return false;
     }
 
@@ -257,17 +255,7 @@ public class ExternalAuthUtils {
      * @return The code produced by calling the external code
      */
     protected int checkGooglePlayServicesAvailable(final Context context) {
-        // Temporarily allowing disk access. TODO: Fix. See http://crbug.com/577190
-        StrictMode.ThreadPolicy oldPolicy = StrictMode.allowThreadDiskWrites();
-        try {
-            long time = SystemClock.elapsedRealtime();
-            int isAvailable =
-                    GoogleApiAvailability.getInstance().isGooglePlayServicesAvailable(context);
-            mRegistrationTimeHistogramSample.record(SystemClock.elapsedRealtime() - time);
-            return isAvailable;
-        } finally {
-            StrictMode.setThreadPolicy(oldPolicy);
-        }
+        return 1;
     }
 
     /**
@@ -278,7 +266,7 @@ public class ExternalAuthUtils {
      * @return true If the code represents a user-recoverable error
      */
     protected boolean isUserRecoverableError(final int errorCode) {
-        return GoogleApiAvailability.getInstance().isUserResolvableError(errorCode);
+        return false;
     }
 
     /**
@@ -288,6 +276,6 @@ public class ExternalAuthUtils {
      * @return a textual description of the error code
      */
     protected String describeError(final int errorCode) {
-        return GoogleApiAvailability.getInstance().getErrorString(errorCode);
+        return "";
     }
 }
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/externalauth/UserRecoverableErrorHandler.java b/chrome/android/java/src/org/chromium/chrome/browser/externalauth/UserRecoverableErrorHandler.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/externalauth/UserRecoverableErrorHandler.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/externalauth/UserRecoverableErrorHandler.java
@@ -10,8 +10,6 @@ import android.content.Context;
 import android.content.DialogInterface;
 import android.support.annotation.IntDef;
 
-import com.google.android.gms.common.GoogleApiAvailability;
-
 import org.chromium.base.ThreadUtils;
 import org.chromium.base.metrics.CachedMetrics.ActionEvent;
 import org.chromium.base.metrics.CachedMetrics.EnumeratedHistogramSample;
@@ -120,7 +118,6 @@ public abstract class UserRecoverableErrorHandler {
                 sErrorHandlerActionHistogramSample.record(ErrorHandlerAction.IGNORED_AS_REDUNDANT);
                 return;
             }
-            GoogleApiAvailability.getInstance().showErrorNotification(context, errorCode);
             sErrorHandlerActionHistogramSample.record(ErrorHandlerAction.SYSTEM_NOTIFICATION);
         }
     }
@@ -213,13 +210,6 @@ public abstract class UserRecoverableErrorHandler {
             if (mErrorCode != errorCode) {
                 cancelDialog();
             }
-            if (mDialog == null) {
-                mDialog = GoogleApiAvailability.getInstance().getErrorDialog(
-                        mActivity, errorCode, NO_RESPONSE_REQUIRED);
-                mErrorCode = errorCode;
-
-                DialogUserActionRecorder.createAndAttachToDialog(mDialog);
-            }
             // This can happen if |errorCode| is ConnectionResult.SERVICE_INVALID.
             if (mDialog != null && !mDialog.isShowing()) {
                 mDialog.setCancelable(mCancelable);
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/omaha/UpdateMenuItemHelper.java b/chrome/android/java/src/org/chromium/chrome/browser/omaha/UpdateMenuItemHelper.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/omaha/UpdateMenuItemHelper.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/omaha/UpdateMenuItemHelper.java
@@ -21,8 +21,6 @@ import android.text.TextUtils;
 import android.view.View;
 import android.view.animation.LinearInterpolator;
 
-import com.google.android.gms.common.GooglePlayServicesUtil;
-
 import org.chromium.base.AsyncTask;
 import org.chromium.base.CommandLine;
 import org.chromium.base.Log;
@@ -163,13 +161,7 @@ public class UpdateMenuItemHelper {
     }
 
     private static boolean isGooglePlayStoreAvailable(Context context) {
-        try {
-            context.getPackageManager().getPackageInfo(
-                    GooglePlayServicesUtil.GOOGLE_PLAY_STORE_PACKAGE, 0);
-        } catch (PackageManager.NameNotFoundException e) {
-            return false;
-        }
-        return true;
+        return false;
     }
 
     /**
diff --git a/chrome/android/java_sources.gni b/chrome/android/java_sources.gni
--- a/chrome/android/java_sources.gni
+++ b/chrome/android/java_sources.gni
@@ -618,10 +618,7 @@ chrome_java_sources = [
   "java/src/org/chromium/chrome/browser/fullscreen/FullscreenManager.java",
   "java/src/org/chromium/chrome/browser/fullscreen/FullscreenOptions.java",
   "java/src/org/chromium/chrome/browser/gcore/ChromeGoogleApiClient.java",
-  "java/src/org/chromium/chrome/browser/gcore/ChromeGoogleApiClientImpl.java",
   "java/src/org/chromium/chrome/browser/gcore/ConnectedTask.java",
-  "java/src/org/chromium/chrome/browser/gcore/GoogleApiClientHelper.java",
-  "java/src/org/chromium/chrome/browser/gcore/LifecycleHook.java",
   "java/src/org/chromium/chrome/browser/gsa/ContextReporter.java",
   "java/src/org/chromium/chrome/browser/gsa/GSAAccountChangeListener.java",
   "java/src/org/chromium/chrome/browser/gsa/GSAContextDisplaySelection.java",
diff --git a/components/signin/core/browser/android/java/src/org/chromium/components/signin/AccountIdProvider.java b/components/signin/core/browser/android/java/src/org/chromium/components/signin/AccountIdProvider.java
--- a/components/signin/core/browser/android/java/src/org/chromium/components/signin/AccountIdProvider.java
+++ b/components/signin/core/browser/android/java/src/org/chromium/components/signin/AccountIdProvider.java
@@ -4,9 +4,6 @@
 
 package org.chromium.components.signin;
 
-import com.google.android.gms.common.ConnectionResult;
-import com.google.android.gms.common.GoogleApiAvailability;
-
 import org.chromium.base.ContextUtils;
 import org.chromium.base.Log;
 import org.chromium.base.StrictModeContext;
@@ -47,12 +44,7 @@ public class AccountIdProvider {
      * Google Play services is available.
      */
     public boolean canBeUsed() {
-        // TODO(http://crbug.com/577190): Remove StrictMode override.
-        try (StrictModeContext unused = StrictModeContext.allowDiskWrites()) {
-            int resultCode = GoogleApiAvailability.getInstance().isGooglePlayServicesAvailable(
-                    ContextUtils.getApplicationContext());
-            return resultCode == ConnectionResult.SUCCESS;
-        }
+        return false;
     }
 
     /**
diff --git a/components/signin/core/browser/android/java/src/org/chromium/components/signin/GmsAvailabilityException.java b/components/signin/core/browser/android/java/src/org/chromium/components/signin/GmsAvailabilityException.java
--- a/components/signin/core/browser/android/java/src/org/chromium/components/signin/GmsAvailabilityException.java
+++ b/components/signin/core/browser/android/java/src/org/chromium/components/signin/GmsAvailabilityException.java
@@ -4,8 +4,6 @@
 
 package org.chromium.components.signin;
 
-import com.google.android.gms.common.GoogleApiAvailability;
-
 /**
  * This class encapsulates return code if GMSCore package is not available.
  */
@@ -27,6 +25,6 @@ public class GmsAvailabilityException extends AccountManagerDelegateException {
     }
 
     public boolean isUserResolvableError() {
-        return GoogleApiAvailability.getInstance().isUserResolvableError(mResultCode);
+        return false;
     }
 }
diff --git a/components/signin/core/browser/android/java/src/org/chromium/components/signin/SystemAccountManagerDelegate.java b/components/signin/core/browser/android/java/src/org/chromium/components/signin/SystemAccountManagerDelegate.java
--- a/components/signin/core/browser/android/java/src/org/chromium/components/signin/SystemAccountManagerDelegate.java
+++ b/components/signin/core/browser/android/java/src/org/chromium/components/signin/SystemAccountManagerDelegate.java
@@ -24,9 +24,6 @@ import android.os.PatternMatcher;
 import android.os.Process;
 import android.os.SystemClock;
 
-import com.google.android.gms.common.ConnectionResult;
-import com.google.android.gms.common.GoogleApiAvailability;
-
 import org.chromium.base.ApiCompatibilityUtils;
 import org.chromium.base.Callback;
 import org.chromium.base.ContextUtils;
@@ -83,17 +80,7 @@ public class SystemAccountManagerDelegate implements AccountManagerDelegate {
     }
 
     protected void checkCanUseGooglePlayServices() throws AccountManagerDelegateException {
-        Context context = ContextUtils.getApplicationContext();
-        final int resultCode =
-                GoogleApiAvailability.getInstance().isGooglePlayServicesAvailable(context);
-        if (resultCode == ConnectionResult.SUCCESS) {
-            return;
-        }
-
-        throw new GmsAvailabilityException(
-                String.format("Can't use Google Play Services: %s",
-                        GoogleApiAvailability.getInstance().getErrorString(resultCode)),
-                resultCode);
+        throw new GmsAvailabilityException("Can't use Google Play Services: CFOSS",0);
     }
 
     @Override
@@ -210,8 +197,9 @@ public class SystemAccountManagerDelegate implements AccountManagerDelegate {
                 callback.onResult(null);
             }
         };
-        mAccountManager.addAccount(GoogleAuthUtil.GOOGLE_ACCOUNT_TYPE, null, null, null, null,
+        /*mAccountManager.addAccount(GoogleAuthUtil.GOOGLE_ACCOUNT_TYPE, null, null, null, null,
                 accountManagerCallback, null);
+	*/
     }
 
     // No permission is needed on 23+ and Chrome always has MANAGE_ACCOUNTS permission on lower APIs
diff --git a/services/shape_detection/android/java/src/org/chromium/shape_detection/FaceDetectionProviderImpl.java b/services/shape_detection/android/java/src/org/chromium/shape_detection/FaceDetectionProviderImpl.java
--- a/services/shape_detection/android/java/src/org/chromium/shape_detection/FaceDetectionProviderImpl.java
+++ b/services/shape_detection/android/java/src/org/chromium/shape_detection/FaceDetectionProviderImpl.java
@@ -4,9 +4,6 @@
 
 package org.chromium.shape_detection;
 
-import com.google.android.gms.common.ConnectionResult;
-import com.google.android.gms.common.GoogleApiAvailability;
-
 import org.chromium.base.ContextUtils;
 import org.chromium.mojo.bindings.InterfaceRequest;
 import org.chromium.mojo.system.MojoException;
@@ -24,10 +21,7 @@ public class FaceDetectionProviderImpl implements FaceDetectionProvider {
     @Override
     public void createFaceDetection(
             InterfaceRequest<FaceDetection> request, FaceDetectorOptions options) {
-        final boolean isGmsCoreSupported =
-                GoogleApiAvailability.getInstance().isGooglePlayServicesAvailable(
-                        ContextUtils.getApplicationContext())
-                == ConnectionResult.SUCCESS;
+        final boolean isGmsCoreSupported = false;
 
         if (isGmsCoreSupported) {
             //FaceDetection.MANAGER.bind(new FaceDetectionImplGmsCore(options), request);
-- 
2.11.0

