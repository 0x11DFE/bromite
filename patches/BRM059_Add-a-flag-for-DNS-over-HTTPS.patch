From: csagan5 <32685696+csagan5@users.noreply.github.com>
Date: Sat, 28 Apr 2018 08:30:26 +0200
Subject: Add a flag for DNS-over-HTTPS

Allow selection between Google and Cloudflare endpoints.

See also: https://tools.ietf.org/id/draft-ietf-doh-dns-over-https-02.txt
---
 chrome/browser/about_flags.cc                              | 12 ++++++++++++
 chrome/browser/flag_descriptions.cc                        |  3 +++
 chrome/browser/flag_descriptions.h                         |  3 +++
 chrome/browser/io_thread.cc                                | 14 +++++++++-----
 .../common/network_features.cc                             |  5 +++--
 .../network_session_configurator/common/network_features.h |  5 +++--
 .../common/network_switch_list.h                           |  4 ++++
 7 files changed, 37 insertions(+), 9 deletions(-)

diff --git a/chrome/browser/about_flags.cc b/chrome/browser/about_flags.cc
--- a/chrome/browser/about_flags.cc
+++ b/chrome/browser/about_flags.cc
@@ -395,6 +395,12 @@ const FeatureEntry::Choice kChromeHomeSwipeLogicChoices[] = {
      switches::kChromeHomeSwipeLogicType, "velocity"},
 };
 
+const FeatureEntry::Choice kDnsOverHttpsChoices[] = {
+    {features::kDnsOverHttpsChoiceDefault, "", ""},
+    {features::kDnsOverHttpsChoiceGoogle, switches::kDnsOverHttpsServer, "https://dns.google.com/experimental"},
+    {features::kDnsOverHttpsChoiceCloudflare, switches::kDnsOverHttpsServer, "https://1.1.1.1/dns-query"},
+};
+
 #endif  // OS_ANDROID
 
 const FeatureEntry::Choice kNumRasterThreadsChoices[] = {
@@ -3544,6 +3550,12 @@ const FeatureEntry kFeatureEntries[] = {
      FEATURE_VALUE_TYPE(features::kAsyncDns)},
 #endif  // defined(OS_ANDROID)
 
+#if defined(OS_ANDROID)
+    {"enable-dns-over-https", flag_descriptions::kDnsOverHttpsName,
+     flag_descriptions::kDnsOverHttpsDescription, kOsAndroid,
+     MULTI_VALUE_TYPE(kDnsOverHttpsChoices)},
+#endif  // defined(OS_ANDROID)
+
     {"enable-overflow-icons-for-media-controls",
      flag_descriptions::kOverflowIconsForMediaControlsName,
      flag_descriptions::kOverflowIconsForMediaControlsDescription, kOsAll,
diff --git a/chrome/browser/flag_descriptions.cc b/chrome/browser/flag_descriptions.cc
--- a/chrome/browser/flag_descriptions.cc
+++ b/chrome/browser/flag_descriptions.cc
@@ -1849,6 +1849,9 @@ const char kAndroidPaymentAppsDescription[] =
 const char kAsyncDnsName[] = "Async DNS resolver";
 const char kAsyncDnsDescription[] = "Enables the built-in DNS resolver.";
 
+const char kDnsOverHttpsName[] = "DNS over HTTPS";
+const char kDnsOverHttpsDescription[] = "Enables DNS-over-HTTPS (experimental).";
+
 const char kAutofillAccessoryViewName[] =
     "Autofill suggestions as keyboard accessory view";
 const char kAutofillAccessoryViewDescription[] =
diff --git a/chrome/browser/flag_descriptions.h b/chrome/browser/flag_descriptions.h
--- a/chrome/browser/flag_descriptions.h
+++ b/chrome/browser/flag_descriptions.h
@@ -1133,6 +1133,9 @@ extern const char kAndroidPaymentAppsDescription[];
 extern const char kAsyncDnsName[];
 extern const char kAsyncDnsDescription[];
 
+extern const char kDnsOverHttpsName[];
+extern const char kDnsOverHttpsDescription[];
+
 extern const char kAutofillAccessoryViewName[];
 extern const char kAutofillAccessoryViewDescription[];
 
diff --git a/chrome/browser/io_thread.cc b/chrome/browser/io_thread.cc
--- a/chrome/browser/io_thread.cc
+++ b/chrome/browser/io_thread.cc
@@ -53,6 +53,7 @@
 #include "components/metrics/metrics_service.h"
 #include "components/net_log/chrome_net_log.h"
 #include "components/network_session_configurator/common/network_features.h"
+#include "components/network_session_configurator/common/network_switches.h"
 #include "components/policy/core/common/policy_service.h"
 #include "components/policy/policy_constants.h"
 #include "components/prefs/pref_registry_simple.h"
@@ -383,13 +384,16 @@ IOThread::IOThread(
                                       base::Unretained(this)));
   dns_client_enabled_.MoveToThread(io_thread_proxy);
 
-  if (base::FeatureList::IsEnabled(features::kDnsOverHttps)) {
+  std::string dnsOverHttpsServer =
+      base::CommandLine::ForCurrentProcess()->GetSwitchValueASCII(
+      switches::kDnsOverHttpsServer);
+  if (!dnsOverHttpsServer.empty()) {
     base::Value specs(base::Value::Type::LIST);
     base::Value methods(base::Value::Type::LIST);
-    base::Value spec(variations::GetVariationParamValueByFeature(
-        features::kDnsOverHttps, "server"));
-    base::Value method(variations::GetVariationParamValueByFeature(
-        features::kDnsOverHttps, "method"));
+
+    base::Value spec(dnsOverHttpsServer);
+    base::Value method("POST");
+
     if (spec.GetString().size() > 0) {
       specs.GetList().push_back(std::move(spec));
       methods.GetList().push_back(std::move(method));
diff --git a/components/network_session_configurator/common/network_features.cc b/components/network_session_configurator/common/network_features.cc
--- a/components/network_session_configurator/common/network_features.cc
+++ b/components/network_session_configurator/common/network_features.cc
@@ -9,7 +9,8 @@ namespace features {
 const base::Feature kTokenBinding{"token-binding",
                                   base::FEATURE_DISABLED_BY_DEFAULT};
 
-const base::Feature kDnsOverHttps{"dns-over-https",
-                                  base::FEATURE_DISABLED_BY_DEFAULT};
+const char kDnsOverHttpsChoiceDefault[] = "Disabled",
+                 kDnsOverHttpsChoiceGoogle[] = "Google",
+                 kDnsOverHttpsChoiceCloudflare[] = "Cloudflare";
 
 }  // namespace features
diff --git a/components/network_session_configurator/common/network_features.h b/components/network_session_configurator/common/network_features.h
--- a/components/network_session_configurator/common/network_features.h
+++ b/components/network_session_configurator/common/network_features.h
@@ -14,9 +14,10 @@ namespace features {
 // (https://www.ietf.org/id/draft-ietf-tokbind-protocol-04.txt).
 NETWORK_SESSION_CONFIGURATOR_EXPORT extern const base::Feature kTokenBinding;
 
-// Enabled DNS over HTTPS
+// DNS over HTTPS server endpoint choices
 // (https://tools.ietf.org/id/draft-ietf-doh-dns-over-https-02.txt).
-NETWORK_SESSION_CONFIGURATOR_EXPORT extern const base::Feature kDnsOverHttps;
+NETWORK_SESSION_CONFIGURATOR_EXPORT extern const char kDnsOverHttpsChoiceDefault[],
+   kDnsOverHttpsChoiceGoogle[], kDnsOverHttpsChoiceCloudflare[];
 
 }  // namespace features
 
diff --git a/components/network_session_configurator/common/network_switch_list.h b/components/network_session_configurator/common/network_switch_list.h
--- a/components/network_session_configurator/common/network_switch_list.h
+++ b/components/network_session_configurator/common/network_switch_list.h
@@ -35,6 +35,10 @@ NETWORK_SWITCH(kOriginToForceQuicOn, "origin-to-force-quic-on")
 // the server.
 NETWORK_SWITCH(kQuicConnectionOptions, "quic-connection-options")
 
+// Specifies an IETF DNS-over-HTTPS server endpoint
+// (https://tools.ietf.org/id/draft-ietf-doh-dns-over-https-02.txt).
+NETWORK_SWITCH(kDnsOverHttpsServer, "dns-over-https-server")
+
 // Specifies the maximum length for a QUIC packet.
 NETWORK_SWITCH(kQuicMaxPacketLength, "quic-max-packet-length")
 
-- 
2.7.4

