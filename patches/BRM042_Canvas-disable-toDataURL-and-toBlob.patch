From: csagan5 <32685696+csagan5@users.noreply.github.com>
Date: Sat, 24 Mar 2018 05:18:03 +0100
Subject: Canvas: disable toDataURL and toBlob

---
 .../Source/core/html/canvas/HTMLCanvasElement.cpp  | 71 ----------------------
 .../canvas/canvas2d/CanvasRenderingContext2D.cpp   | 19 +-----
 2 files changed, 1 insertion(+), 89 deletions(-)

diff --git a/third_party/WebKit/Source/core/html/canvas/HTMLCanvasElement.cpp b/third_party/WebKit/Source/core/html/canvas/HTMLCanvasElement.cpp
--- a/third_party/WebKit/Source/core/html/canvas/HTMLCanvasElement.cpp
+++ b/third_party/WebKit/Source/core/html/canvas/HTMLCanvasElement.cpp
@@ -779,42 +779,7 @@ String HTMLCanvasElement::ToDataURLInternal(
     const String& mime_type,
     const double& quality,
     SourceDrawingBuffer source_buffer) const {
-  if (!IsPaintable())
     return String("data:,");
-
-  String encoding_mime_type = ImageEncoderUtils::ToEncodingMimeType(
-      mime_type, ImageEncoderUtils::kEncodeReasonToDataURL);
-
-  Optional<ScopedUsHistogramTimer> timer;
-  if (encoding_mime_type == "image/png") {
-    DEFINE_THREAD_SAFE_STATIC_LOCAL(
-        CustomCountHistogram, scoped_us_counter_png,
-        ("Blink.Canvas.ToDataURL.PNG", 0, 10000000, 50));
-    timer.emplace(scoped_us_counter_png);
-  } else if (encoding_mime_type == "image/jpeg") {
-    DEFINE_THREAD_SAFE_STATIC_LOCAL(
-        CustomCountHistogram, scoped_us_counter_jpeg,
-        ("Blink.Canvas.ToDataURL.JPEG", 0, 10000000, 50));
-    timer.emplace(scoped_us_counter_jpeg);
-  } else if (encoding_mime_type == "image/webp") {
-    DEFINE_THREAD_SAFE_STATIC_LOCAL(
-        CustomCountHistogram, scoped_us_counter_webp,
-        ("Blink.Canvas.ToDataURL.WEBP", 0, 10000000, 50));
-    timer.emplace(scoped_us_counter_webp);
-  } else {
-    // Currently we only support three encoding types.
-    NOTREACHED();
-  }
-
-  scoped_refptr<StaticBitmapImage> image_bitmap =
-      ToStaticBitmapImage(source_buffer, kPreferNoAcceleration);
-  if (image_bitmap) {
-    std::unique_ptr<ImageDataBuffer> data_buffer =
-        ImageDataBuffer::Create(image_bitmap);
-    if (data_buffer)
-      return data_buffer->ToDataURL(encoding_mime_type, quality);
-  }
-  return String("data:,");
 }
 
 String HTMLCanvasElement::toDataURL(const String& mime_type,
@@ -844,48 +809,12 @@ void HTMLCanvasElement::toBlob(V8BlobCallback* callback,
     return;
   }
 
-  if (!IsPaintable()) {
-    // If the canvas element's bitmap has no pixels
-    GetDocument()
-        .GetTaskRunner(TaskType::kCanvasBlobSerialization)
-        ->PostTask(FROM_HERE,
-                   WTF::Bind(&V8BlobCallback::InvokeAndReportException,
-                             WrapPersistentCallbackFunction(callback), nullptr,
-                             nullptr));
-    return;
-  }
-
-  double start_time = WTF::CurrentTimeTicksInSeconds();
-  double quality = kUndefinedQualityValue;
-  if (!quality_argument.IsEmpty()) {
-    v8::Local<v8::Value> v8_value = quality_argument.V8Value();
-    if (v8_value->IsNumber()) {
-      quality = v8_value.As<v8::Number>()->Value();
-    }
-  }
-
-  String encoding_mime_type = ImageEncoderUtils::ToEncodingMimeType(
-      mime_type, ImageEncoderUtils::kEncodeReasonToBlobCallback);
-
-  CanvasAsyncBlobCreator* async_creator = nullptr;
-  scoped_refptr<StaticBitmapImage> image_bitmap =
-      ToStaticBitmapImage(kBackBuffer, kPreferNoAcceleration);
-  if (image_bitmap) {
-    async_creator = CanvasAsyncBlobCreator::Create(
-        image_bitmap, encoding_mime_type, callback, start_time, &GetDocument());
-  }
-
-  if (async_creator) {
-    async_creator->ScheduleAsyncBlobCreation(quality);
-  } else {
     GetDocument()
         .GetTaskRunner(TaskType::kCanvasBlobSerialization)
         ->PostTask(FROM_HERE,
                    WTF::Bind(&V8BlobCallback::InvokeAndReportException,
                              WrapPersistentCallbackFunction(callback), nullptr,
                              nullptr));
-    return;
-  }
 }
 
 void HTMLCanvasElement::AddListener(CanvasDrawListener* listener) {
diff --git a/third_party/WebKit/Source/modules/canvas/canvas2d/CanvasRenderingContext2D.cpp b/third_party/WebKit/Source/modules/canvas/canvas2d/CanvasRenderingContext2D.cpp
--- a/third_party/WebKit/Source/modules/canvas/canvas2d/CanvasRenderingContext2D.cpp
+++ b/third_party/WebKit/Source/modules/canvas/canvas2d/CanvasRenderingContext2D.cpp
@@ -758,24 +758,7 @@ void CanvasRenderingContext2D::strokeText(const String& text,
 }
 
 TextMetrics* CanvasRenderingContext2D::measureText(const String& text) {
-  // The style resolution required for fonts is not available in frame-less
-  // documents.
-  if (!canvas()->GetDocument().GetFrame())
-    return TextMetrics::Create();
-
-  canvas()->GetDocument().UpdateStyleAndLayoutTreeForNode(canvas());
-
-  const Font& font = AccessFont();
-
-  TextDirection direction;
-  if (GetState().GetDirection() ==
-      CanvasRenderingContext2DState::kDirectionInherit)
-    direction = DetermineDirectionality(text);
-  else
-    direction = ToTextDirection(GetState().GetDirection(), canvas());
-
-  return TextMetrics::Create(font, direction, GetState().GetTextBaseline(),
-                             GetState().GetTextAlign(), text);
+  return TextMetrics::Create();
 }
 
 void CanvasRenderingContext2D::DrawTextInternal(
-- 
2.7.4

