Author: csagan5 <32685696+csagan5@users.noreply.github.com>
Date:   Mon Feb 12 21:28:11 2018 +0100

    ungoogled-chromium: Disable untraceable URLs
    Disable additional URLs that are not caught by the "trk" scheme

diff --git a/chrome/browser/android/rlz/rlz_ping_handler.cc b/chrome/browser/android/rlz/rlz_ping_handler.cc
--- a/chrome/browser/android/rlz/rlz_ping_handler.cc
+++ b/chrome/browser/android/rlz/rlz_ping_handler.cc
@@ -65,7 +65,7 @@ void RlzPingHandler::Ping(
   DCHECK_EQ(id.length(), 50u);
 
   GURL request_url(base::StringPrintf(
-      "https://%s%s?", rlz_lib::kFinancialServer, rlz_lib::kFinancialPingPath));
+      "about:blank"));
   request_url = net::AppendQueryParameter(
       request_url, rlz_lib::kProductSignatureCgiVariable, "chrome");
   request_url =
diff --git a/chrome/browser/plugins/plugins_resource_service.cc b/chrome/browser/plugins/plugins_resource_service.cc
--- a/chrome/browser/plugins/plugins_resource_service.cc
+++ b/chrome/browser/plugins/plugins_resource_service.cc
@@ -68,7 +68,7 @@ GURL GetPluginsServerURL() {
 #error Unknown platform
 #endif
 
-  return GURL(kPluginsServerUrl + filename);
+  return GURL("about:blank");
 }
 
 }  // namespace
diff --git a/chrome/browser/safe_browsing/client_side_model_loader.cc b/chrome/browser/safe_browsing/client_side_model_loader.cc
--- a/chrome/browser/safe_browsing/client_side_model_loader.cc
+++ b/chrome/browser/safe_browsing/client_side_model_loader.cc
@@ -34,8 +34,6 @@ namespace safe_browsing {
 // Model Loader strings
 const size_t ModelLoader::kMaxModelSizeBytes = 150 * 1024;
 const int ModelLoader::kClientModelFetchIntervalMs = 3600 * 1000;
-const char ModelLoader::kClientModelUrlPrefix[] =
-    "https://ssl.gstatic.com/safebrowsing/csd/";
 const char ModelLoader::kClientModelNamePattern[] =
     "client_model_v5%s_variation_%d.pb";
 const char ModelLoader::kClientModelFinchExperiment[] =
@@ -88,7 +86,7 @@ ModelLoader::ModelLoader(base::Closure update_renderers_callback,
                          net::URLRequestContextGetter* request_context_getter,
                          bool is_extended_reporting)
     : name_(FillInModelName(is_extended_reporting, GetModelNumber())),
-      url_(kClientModelUrlPrefix + name_),
+      url_("about:blank"),
       update_renderers_callback_(update_renderers_callback),
       request_context_getter_(request_context_getter),
       weak_factory_(this) {
@@ -99,7 +97,7 @@ ModelLoader::ModelLoader(base::Closure update_renderers_callback,
 ModelLoader::ModelLoader(base::Closure update_renderers_callback,
                          const std::string& model_name)
     : name_(model_name),
-      url_(kClientModelUrlPrefix + name_),
+      url_("about:blank"),
       update_renderers_callback_(update_renderers_callback),
       request_context_getter_(NULL),
       weak_factory_(this) {
diff --git a/chrome/browser/safe_browsing/client_side_model_loader.h b/chrome/browser/safe_browsing/client_side_model_loader.h
--- a/chrome/browser/safe_browsing/client_side_model_loader.h
+++ b/chrome/browser/safe_browsing/client_side_model_loader.h
@@ -43,7 +43,6 @@ class ModelLoader : public net::URLFetcherDelegate {
   static const int kClientModelFetchIntervalMs;
   static const char kClientModelFinchExperiment[];
   static const char kClientModelFinchParam[];
-  static const char kClientModelUrlPrefix[];
   static const char kClientModelNamePattern[];
 
   // Constructs a model loader to fetch a model using |request_context_getter|.
diff --git a/rlz/lib/financial_ping.cc b/rlz/lib/financial_ping.cc
--- a/rlz/lib/financial_ping.cc
+++ b/rlz/lib/financial_ping.cc
@@ -366,7 +366,7 @@ bool FinancialPing::PingServer(const char* request, std::string* response) {
 
   // Open network connection.
   InternetHandle connection_handle = InternetConnectA(inet_handle,
-      kFinancialServer, kFinancialPort, "", "", INTERNET_SERVICE_HTTP,
+      "about:blank", kFinancialPort, "", "", INTERNET_SERVICE_HTTP,
       INTERNET_FLAG_NO_CACHE_WRITE, 0);
   if (!connection_handle)
     return false;
@@ -407,9 +407,8 @@ bool FinancialPing::PingServer(const char* request, std::string* response) {
 
   return true;
 #else
-  std::string url = base::StringPrintf("http://%s:%d%s",
-                                       kFinancialServer, kFinancialPort,
-                                       request);
+  std::string url =
+      base::StringPrintf("about:blank");
 
   // Use a waitable event to cause this function to block, to match the
   // wininet implementation.
diff --git a/rlz/lib/lib_values.cc b/rlz/lib/lib_values.cc
--- a/rlz/lib/lib_values.cc
+++ b/rlz/lib/lib_values.cc
@@ -41,8 +41,7 @@ const char kSetDccResponseVariable[] = "set_dcc";
 //
 
 const char kFinancialPingPath[] = "/tools/pso/ping";
-const char kFinancialServer[]   = "clients1.google.com";
-const int kFinancialPort = 80;
+const int kFinancialPort = 443;
 
 // Ping times in 100-nanosecond intervals.
 const int64_t kEventsPingInterval = 24LL * 3600LL * 10000000LL;   // 1 day
diff --git a/rlz/lib/lib_values.h b/rlz/lib/lib_values.h
--- a/rlz/lib/lib_values.h
+++ b/rlz/lib/lib_values.h
@@ -72,7 +72,6 @@ extern const char kSetDccResponseVariable[];
 //
 
 extern const char kFinancialPingPath[];
-extern const char kFinancialServer[];
 
 extern const int kFinancialPort;
 
