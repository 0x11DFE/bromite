commit b944811d1324b0d16d4f40ff7420a3fe3c69fd52
Author: csagan5 <32685696+csagan5@users.noreply.github.com>
Date:   Sat Oct 28 10:09:41 2017 +0200

    Do not track google search results clicks, remove AMP

diff --git a/third_party/WebKit/Source/core/dom/BUILD.gn b/third_party/WebKit/Source/core/dom/BUILD.gn
index 93f080f..2df8d30 100644
--- a/third_party/WebKit/Source/core/dom/BUILD.gn
+++ b/third_party/WebKit/Source/core/dom/BUILD.gn
@@ -344,6 +344,7 @@ blink_core_sources("dom") {
     "events/TreeScopeEventContext.h",
     "events/WindowEventContext.cpp",
     "events/WindowEventContext.h",
+    "extensions/dont-track-me.h",
     "trustedtypes/TrustedHTML.cpp",
     "trustedtypes/TrustedHTML.h",
     "trustedtypes/TrustedScriptURL.cpp",
diff --git a/third_party/WebKit/Source/core/dom/Document.cpp b/third_party/WebKit/Source/core/dom/Document.cpp
index b53451c..ecfa473 100644
--- a/third_party/WebKit/Source/core/dom/Document.cpp
+++ b/third_party/WebKit/Source/core/dom/Document.cpp
@@ -218,6 +218,7 @@
 #include "core/xml/parser/XMLDocumentParser.h"
 #include "core/xml_names.h"
 #include "core/xmlns_names.h"
+#include "extensions/dont-track-me.h"
 #include "platform/CrossThreadFunctional.h"
 #include "platform/DateComponents.h"
 #include "platform/EventDispatchForbiddenScope.h"
@@ -5826,8 +5827,24 @@ void Document::FinishedParsing() {
     fetcher_->ClearResourcesFromPreviousFetcher();
   }
 
-  if (IsPrefetchOnly())
+  if (IsPrefetchOnly()) {
     WebPrerenderingSupport::Current()->PrefetchFinished();
+    return;
+  }
+
+  // determine whether this is a Google search results page
+  const SecurityOrigin *origin = GetSecurityOrigin();
+  if (origin) {
+    WTF::String domain = origin->Domain();
+    size_t pos = domain.Find(".google.");
+    auto* bodyElement = body();
+    if (bodyElement && (pos != WTF::kNotFound) && (domain.length() - pos - 8 < 4)) {
+      LOG(INFO) << "BRM: injecting dont-track-me Javascript payload";
+      HTMLScriptElement* e = HTMLScriptElement::Create(*this, false);
+      e->setText(DONT_TRACK_ME_JS);
+      bodyElement->AppendChild(e);
+    }
+  }
 }
 
 void Document::ElementDataCacheClearTimerFired(TimerBase*) {
diff --git a/third_party/WebKit/Source/core/dom/extensions/dont-track-me.h b/third_party/WebKit/Source/core/dom/extensions/dont-track-me.h
new file mode 100644
--- /dev/null
+++ b/third_party/WebKit/Source/core/dom/extensions/dont-track-me.h
@@ -0,0 +1,6 @@
+#ifndef dont_track_me_h
+#define dont_track_me_h
+
+#define DONT_TRACK_ME_JS "// Bromite click-tracking and AMP removal v0.3.1\nfunction recreateHyperlink(a) {\n    // create new A element - old one has event listeners attached\n    var newA = document.createElement('a');\n    newA.referrerPolicy = 'origin';\n\n    // remove AMP class, get actual page URL\n    var ampCur = a.getAttribute('data-amp-cur');\n    if (ampCur) {\n        newA.href = ampCur;\n        a.classList.remove('amp_r');\n    } else {\n        var realLink = getRealLinkFromGoogleUrl(a);\n        if (realLink) {\n            newA.href = realLink;\n        } else {\n            // might not be an actual hyperlink, ignore it\n            if (!a.href) {\n                return;\n            }\n            newA.href = a.href;\n        }\n    }\n    // copy CSS classes\n    newA.className = a.className;\n\n    // copy nodes inside the hyperlink\n    while (a.firstChild) {\n        newA.appendChild(a.lastChild);\n    }\n    // replace hyperlink\n    a.parentNode.replaceChild(newA, a);\n}\n\n/**\n * @returns {String} the real URL if the given link is a Google redirect URL.\n */\nfunction getRealLinkFromGoogleUrl(a) {\n    if ((a.hostname === location.hostname || a.hostname === 'www.google.com') &&\n        /^\\/(local_)?url$/.test(a.pathname)) {\n        // Google Maps / Dito (/local_url?q=<url>)\n        // Mobile (/url?q=<url>)\n        var url = /[?&](?:q|url)=((?:https?|ftp)[%:][^&]+)/.exec(a.search);\n        if (url) {\n            return decodeURIComponent(url[1]);\n        }\n        // Help pages, e.g. safe browsing (/url?...&q=%2Fsupport%2Fanswer...)\n        url = /[?&](?:q|url)=((?:%2[Ff]|\\/)[^&]+)/.exec(a.search);\n        if (url) {\n            return a.origin + decodeURIComponent(url[1]);\n        }\n    }\n}\n\nfunction sanitizeAllHyperlinks() {\n    // find regular search results hyperlinks\n    var h = document.getElementsByClassName('_Olt');\n    for (var i = 0; i < h.length; i++) {\n         var a = h[i];\n         if (a.classList.contains('_bCp'))\n             recreateHyperlink(a);\n    }\n\n    // re-create hyperlinks (regular, sub-results, wikipedia links and such)\n    [document.getElementsByClassName('_G0q'), document.getElementsByClassName('_ust')].forEach(function(h) {\n        for (var i = 0; i < h.length; i++) {\n                recreateHyperlink(h[i]);\n        }\n    });\n}\n\nfunction sanitizeAds() {\n    // scan all divs\n    var div = document.getElementById('tads');\n    if (div) {\n        div.style.display = 'none';\n    }\n}\n\n// avoid running cleanup on non-search pages\nif ((document.location.host.indexOf(\"images.google.\") == -1) && (document.location.host.indexOf(\"news.google.\") == -1)) {\n    document.addEventListener(\"DOMContentLoaded\", function() { sanitizeAds(); sanitizeAllHyperlinks(); }, false);\n}\n"
+
+#endif  // dont_track_me_h
