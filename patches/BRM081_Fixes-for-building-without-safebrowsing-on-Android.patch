From: csagan5 <32685696+csagan5@users.noreply.github.com>
Date: Tue, 18 Sep 2018 08:06:14 +0200
Subject: Fixes for building without safebrowsing on Android

---
 .../android/java/res/xml/privacy_preferences.xml   | 12 -----
 .../preferences/privacy/PrivacyPreferences.java    | 58 ----------------------
 .../chrome_browsing_data_remover_delegate.cc       | 10 ----
 .../chrome_resource_dispatcher_host_delegate.cc    |  2 +
 4 files changed, 2 insertions(+), 80 deletions(-)

diff --git a/chrome/android/java/res/xml/privacy_preferences.xml b/chrome/android/java/res/xml/privacy_preferences.xml
--- a/chrome/android/java/res/xml/privacy_preferences.xml
+++ b/chrome/android/java/res/xml/privacy_preferences.xml
@@ -25,18 +25,6 @@
         android:summary="@string/always_incognito_summary"
         android:defaultValue="false" />
     <org.chromium.chrome.browser.preferences.ChromeBaseCheckBoxPreference
-        android:key="safe_browsing_extended_reporting"
-        android:title="@string/safe_browsing_extended_reporting_title"
-        android:summary="@string/safe_browsing_extended_reporting_summary" />
-    <org.chromium.chrome.browser.preferences.ChromeBaseCheckBoxPreference
-        android:key="safe_browsing_scout_reporting"
-        android:title="@string/safe_browsing_scout_reporting_title"
-        android:summary="@string/safe_browsing_scout_reporting_summary" />
-    <org.chromium.chrome.browser.preferences.ChromeBaseCheckBoxPreference
-        android:key="safe_browsing"
-        android:title="@string/safe_browsing_title"
-        android:summary="@string/safe_browsing_summary" />
-    <org.chromium.chrome.browser.preferences.ChromeBaseCheckBoxPreference
         android:key="network_predictions"
         android:title="@string/network_predictions_title"
         android:summary="@string/network_predictions_summary"
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/preferences/privacy/PrivacyPreferences.java b/chrome/android/java/src/org/chromium/chrome/browser/preferences/privacy/PrivacyPreferences.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/preferences/privacy/PrivacyPreferences.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/preferences/privacy/PrivacyPreferences.java
@@ -39,12 +39,7 @@ public class PrivacyPreferences extends PreferenceFragment
         implements OnPreferenceChangeListener {
     private static final String PREF_NAVIGATION_ERROR = "navigation_error";
     private static final String PREF_SEARCH_SUGGESTIONS = "search_suggestions";
-    private static final String PREF_SAFE_BROWSING_EXTENDED_REPORTING =
-            "safe_browsing_extended_reporting";
-    private static final String PREF_SAFE_BROWSING_SCOUT_REPORTING =
-            "safe_browsing_scout_reporting";
     public static final String PREF_ALLOW_CUSTOM_TAB_INTENTS = "allow_custom_tab_intents";
-    private static final String PREF_SAFE_BROWSING = "safe_browsing";
     private static final String PREF_CAN_MAKE_PAYMENT = "can_make_payment";
     private static final String PREF_CONTEXTUAL_SEARCH = "contextual_search";
     private static final String PREF_NETWORK_PREDICTIONS = "network_predictions";
@@ -77,10 +72,6 @@ public class PrivacyPreferences extends PreferenceFragment
             // Remove preferences that were migrated to SyncAndServicesPreferences.
             preferenceScreen.removePreference(findPreference(PREF_NAVIGATION_ERROR));
             preferenceScreen.removePreference(findPreference(PREF_SEARCH_SUGGESTIONS));
-            preferenceScreen.removePreference(
-                    findPreference(PREF_SAFE_BROWSING_EXTENDED_REPORTING));
-            preferenceScreen.removePreference(findPreference(PREF_SAFE_BROWSING_SCOUT_REPORTING));
-            preferenceScreen.removePreference(findPreference(PREF_SAFE_BROWSING));
             preferenceScreen.removePreference(findPreference(PREF_NETWORK_PREDICTIONS));
             preferenceScreen.removePreference(findPreference(PREF_CONTEXTUAL_SEARCH));
             preferenceScreen.removePreference(findPreference(PREF_USAGE_AND_CRASH_REPORTING));
@@ -122,32 +113,11 @@ public class PrivacyPreferences extends PreferenceFragment
             preferenceScreen.removePreference(findPreference(PREF_CONTEXTUAL_SEARCH));
         }
 
-        // Listen to changes to both Extended Reporting prefs.
-        ChromeBaseCheckBoxPreference legacyExtendedReportingPref =
-                (ChromeBaseCheckBoxPreference) findPreference(
-                    PREF_SAFE_BROWSING_EXTENDED_REPORTING);
-        legacyExtendedReportingPref.setOnPreferenceChangeListener(this);
-        legacyExtendedReportingPref.setManagedPreferenceDelegate(mManagedPreferenceDelegate);
-        ChromeBaseCheckBoxPreference scoutReportingPref =
-                (ChromeBaseCheckBoxPreference) findPreference(PREF_SAFE_BROWSING_SCOUT_REPORTING);
-        scoutReportingPref.setOnPreferenceChangeListener(this);
-        scoutReportingPref.setManagedPreferenceDelegate(mManagedPreferenceDelegate);
-        // Remove the extended reporting preference that is NOT active.
-        String extended_reporting_pref_to_remove =
-                prefServiceBridge.isSafeBrowsingScoutReportingActive()
-                    ? PREF_SAFE_BROWSING_EXTENDED_REPORTING : PREF_SAFE_BROWSING_SCOUT_REPORTING;
-        preferenceScreen.removePreference(findPreference(extended_reporting_pref_to_remove));
-
         ChromeBaseCheckBoxPreference allowCustomTabIntentsPref =
                 (ChromeBaseCheckBoxPreference) findPreference(PREF_ALLOW_CUSTOM_TAB_INTENTS);
         allowCustomTabIntentsPref.setOnPreferenceChangeListener(this);
         allowCustomTabIntentsPref.setManagedPreferenceDelegate(mManagedPreferenceDelegate);
 
-        ChromeBaseCheckBoxPreference safeBrowsingPref =
-                (ChromeBaseCheckBoxPreference) findPreference(PREF_SAFE_BROWSING);
-        safeBrowsingPref.setOnPreferenceChangeListener(this);
-        safeBrowsingPref.setManagedPreferenceDelegate(mManagedPreferenceDelegate);
-
         ChromeBaseCheckBoxPreference closeTabsOnExitPref =
                 (ChromeBaseCheckBoxPreference) findPreference(PREF_CLOSE_TABS_ON_EXIT);
         closeTabsOnExitPref.setOnPreferenceChangeListener(this);
@@ -161,12 +131,6 @@ public class PrivacyPreferences extends PreferenceFragment
         String key = preference.getKey();
         if (PREF_SEARCH_SUGGESTIONS.equals(key)) {
             PrefServiceBridge.getInstance().setSearchSuggestEnabled((boolean) newValue);
-        } else if (PREF_SAFE_BROWSING.equals(key)) {
-            PrefServiceBridge.getInstance().setSafeBrowsingEnabled((boolean) newValue);
-        } else if (PREF_SAFE_BROWSING_EXTENDED_REPORTING.equals(key)
-                   || PREF_SAFE_BROWSING_SCOUT_REPORTING.equals(key)) {
-            PrefServiceBridge.getInstance().setSafeBrowsingExtendedReportingEnabled(
-                    (boolean) newValue);
         } else if (PREF_ALLOW_CUSTOM_TAB_INTENTS.equals(key)) {
             SharedPreferences.Editor sharedPreferencesEditor = ContextUtils.getAppSharedPreferences().edit();
             sharedPreferencesEditor.putBoolean(PREF_ALLOW_CUSTOM_TAB_INTENTS, (boolean)newValue);
@@ -225,21 +189,6 @@ public class PrivacyPreferences extends PreferenceFragment
             searchSuggestionsPref.setChecked(prefServiceBridge.isSearchSuggestEnabled());
         }
 
-        String extended_reporting_pref = prefServiceBridge.isSafeBrowsingScoutReportingActive()
-                ? PREF_SAFE_BROWSING_SCOUT_REPORTING : PREF_SAFE_BROWSING_EXTENDED_REPORTING;
-        CheckBoxPreference extendedReportingPref =
-                (CheckBoxPreference) findPreference(extended_reporting_pref);
-        if (extendedReportingPref != null) {
-            extendedReportingPref.setChecked(
-                    prefServiceBridge.isSafeBrowsingExtendedReportingEnabled());
-        }
-
-        CheckBoxPreference safeBrowsingPref =
-                (CheckBoxPreference) findPreference(PREF_SAFE_BROWSING);
-        if (safeBrowsingPref != null) {
-            safeBrowsingPref.setChecked(prefServiceBridge.isSafeBrowsingEnabled());
-        }
-
         CheckBoxPreference canMakePaymentPref =
                 (CheckBoxPreference) findPreference(PREF_CAN_MAKE_PAYMENT);
         if (canMakePaymentPref != null) {
@@ -276,13 +225,6 @@ public class PrivacyPreferences extends PreferenceFragment
             if (PREF_SEARCH_SUGGESTIONS.equals(key)) {
                 return prefs.isSearchSuggestManaged();
             }
-            if (PREF_SAFE_BROWSING_EXTENDED_REPORTING.equals(key)
-                    || PREF_SAFE_BROWSING_SCOUT_REPORTING.equals(key)) {
-                return prefs.isSafeBrowsingExtendedReportingManaged();
-            }
-            if (PREF_SAFE_BROWSING.equals(key)) {
-                return prefs.isSafeBrowsingManaged();
-            }
             if (PREF_NETWORK_PREDICTIONS.equals(key)) {
                 return prefs.isNetworkPredictionManaged();
             }
diff --git a/chrome/browser/browsing_data/chrome_browsing_data_remover_delegate.cc b/chrome/browser/browsing_data/chrome_browsing_data_remover_delegate.cc
--- a/chrome/browser/browsing_data/chrome_browsing_data_remover_delegate.cc
+++ b/chrome/browser/browsing_data/chrome_browsing_data_remover_delegate.cc
@@ -256,16 +256,6 @@ bool DoesOriginMatchEmbedderMask(int origin_type_mask,
   return false;
 }
 
-// Callback for when cookies have been deleted. Invokes NotifyIfDone.
-// Receiving |cookie_manager| as a parameter so that the receive pipe is
-// not deleted before the response is received.
-void OnClearedCookies(base::OnceClosure done,
-                      network::mojom::CookieManagerPtr cookie_manager,
-                      uint32_t num_deleted) {
-  DCHECK_CURRENTLY_ON(BrowserThread::UI);
-  std::move(done).Run();
-}
-
 }  // namespace
 
 ChromeBrowsingDataRemoverDelegate::ChromeBrowsingDataRemoverDelegate(
diff --git a/chrome/browser/loader/chrome_resource_dispatcher_host_delegate.cc b/chrome/browser/loader/chrome_resource_dispatcher_host_delegate.cc
--- a/chrome/browser/loader/chrome_resource_dispatcher_host_delegate.cc
+++ b/chrome/browser/loader/chrome_resource_dispatcher_host_delegate.cc
@@ -495,8 +495,10 @@ void ChromeResourceDispatcherHostDelegate::AppendStandardResourceThrottles(
   // of the list, so one of them gets to decide if the resource is safe.
   content::ResourceThrottle* first_throttle = NULL;
 #if defined(OS_ANDROID)
+#if defined(SAFE_BROWSING_DB_LOCAL) || defined(SAFE_BROWSING_DB_REMOTE)
   first_throttle = DataReductionProxyResourceThrottle::MaybeCreate(
       request, resource_context, resource_type, nullptr);
+#endif
 #endif  // defined(OS_ANDROID)
 
 #if defined(SAFE_BROWSING_DB_LOCAL) || defined(SAFE_BROWSING_DB_REMOTE)
-- 
2.7.4

