From: csagan5 <32685696+csagan5@users.noreply.github.com>
Date: Sun, 24 Jan 2021 14:47:49 +0100
Subject: Revert "Remove ChromeActivity reference from BookmarkPage"

This reverts commit 1858b3af2a7d28e4e8b396a230a486fdc8cb0f0c.
---
 .../java/src/org/chromium/chrome/browser/DEPS |  3 ++
 .../browser/bookmarks/BookmarkActivity.java   |  7 +----
 .../browser/bookmarks/BookmarkManager.java    | 28 +++++++----------
 .../browser/bookmarks/BookmarkPage.java       | 11 ++-----
 .../bookmarks/BookmarkUndoController.java     |  3 +-
 .../browser/bookmarks/BookmarkUtils.java      | 30 ++++++++++---------
 .../native_page/NativePageFactory.java        |  3 +-
 7 files changed, 37 insertions(+), 48 deletions(-)

diff --git a/chrome/android/java/src/org/chromium/chrome/browser/DEPS b/chrome/android/java/src/org/chromium/chrome/browser/DEPS
--- a/chrome/android/java/src/org/chromium/chrome/browser/DEPS
+++ b/chrome/android/java/src/org/chromium/chrome/browser/DEPS
@@ -68,6 +68,9 @@ specific_include_rules = {
   "CardUnmaskPrompt\.java": [
     "+chrome/android/java/src/org/chromium/chrome/browser/app/ChromeActivity.java",
   ],
+  "BookmarkPage\.java": [
+    "+chrome/android/java/src/org/chromium/chrome/browser/app/ChromeActivity.java",
+  ],
   "QualityEnforcer\.java": [
     "+chrome/android/java/src/org/chromium/chrome/browser/app/ChromeActivity.java",
   ],
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkActivity.java b/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkActivity.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkActivity.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkActivity.java
@@ -10,8 +10,6 @@ import android.text.TextUtils;
 
 import androidx.annotation.VisibleForTesting;
 
-import org.chromium.base.IntentUtils;
-import org.chromium.chrome.browser.IntentHandler;
 import org.chromium.chrome.browser.SnackbarActivity;
 import org.chromium.components.bookmarks.BookmarkId;
 import org.chromium.components.embedder_support.util.UrlConstants;
@@ -30,10 +28,7 @@ public class BookmarkActivity extends SnackbarActivity {
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-        mBookmarkManager = new BookmarkManager(this,
-                IntentUtils.safeGetParcelableExtra(
-                        getIntent(), IntentHandler.EXTRA_PARENT_COMPONENT),
-                true, getSnackbarManager());
+        mBookmarkManager = new BookmarkManager(this, true, getSnackbarManager());
         String url = getIntent().getDataString();
         if (TextUtils.isEmpty(url)) url = UrlConstants.BOOKMARKS_URL;
         mBookmarkManager.updateForUrl(url);
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkManager.java b/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkManager.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkManager.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkManager.java
@@ -4,11 +4,10 @@
 
 package org.chromium.chrome.browser.bookmarks;
 
+import android.app.Activity;
 import android.app.ActivityManager;
-import android.content.ComponentName;
 import android.content.Context;
 import android.text.TextUtils;
-import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
 import android.view.accessibility.AccessibilityManager;
@@ -50,8 +49,7 @@ public class BookmarkManager
 
     private static boolean sPreventLoadingForTesting;
 
-    private Context mContext;
-    private ComponentName mOpenBookmarkComponentName;
+    private Activity mActivity;
     private ViewGroup mMainView;
     private BookmarkModel mBookmarkModel;
     private BookmarkUndoController mUndoController;
@@ -160,15 +158,12 @@ public class BookmarkManager
     /**
      * Creates an instance of {@link BookmarkManager}. It also initializes resources,
      * bookmark models and jni bridges.
-     * @param context The current {@link Context} used to obtain resources or inflate views.
-     * @param openBookmarkComponentName The component to use when opening a bookmark.
+     * @param activity The activity context to use.
      * @param isDialogUi Whether the main bookmarks UI will be shown in a dialog, not a NativePage.
      * @param snackbarManager The {@link SnackbarManager} used to display snackbars.
      */
-    public BookmarkManager(Context context, ComponentName openBookmarkComponentName,
-            boolean isDialogUi, SnackbarManager snackbarManager) {
-        mContext = context;
-        mOpenBookmarkComponentName = openBookmarkComponentName;
+    public BookmarkManager(Activity activity, boolean isDialogUi, SnackbarManager snackbarManager) {
+        mActivity = activity;
         mIsDialogUi = isDialogUi;
 
         mSelectionDelegate = new SelectionDelegate<BookmarkId>() {
@@ -185,7 +180,7 @@ public class BookmarkManager
         mDragStateDelegate = new BookmarkDragStateDelegate();
 
         mBookmarkModel = new BookmarkModel();
-        mMainView = (ViewGroup) LayoutInflater.from(mContext).inflate(R.layout.bookmark_main, null);
+        mMainView = (ViewGroup) mActivity.getLayoutInflater().inflate(R.layout.bookmark_main, null);
 
         @SuppressWarnings("unchecked")
         SelectableListLayout<BookmarkId> selectableList =
@@ -194,7 +189,7 @@ public class BookmarkManager
         mSelectableListLayout.initializeEmptyView(
                 R.string.bookmarks_folder_empty, R.string.bookmark_no_result);
 
-        mAdapter = new BookmarkItemsAdapter(mContext);
+        mAdapter = new BookmarkItemsAdapter(activity);
 
         mAdapterDataObserver = new AdapterDataObserver() {
             @Override
@@ -219,7 +214,7 @@ public class BookmarkManager
 
         mSelectableListLayout.configureWideDisplayStyle();
 
-        mUndoController = new BookmarkUndoController(mContext, mBookmarkModel, snackbarManager);
+        mUndoController = new BookmarkUndoController(activity, mBookmarkModel, snackbarManager);
         mBookmarkModel.addObserver(mBookmarkModelObserver);
         initializeToLoadingState();
         if (!sPreventLoadingForTesting) {
@@ -405,7 +400,7 @@ public class BookmarkManager
         if (state.mState == BookmarkUIState.STATE_FOLDER) {
             // Loading and searching states may be pushed to the stack but should never be stored in
             // preferences.
-            BookmarkUtils.setLastUsedUrl(mContext, state.mUrl);
+            BookmarkUtils.setLastUsedUrl(mActivity, state.mUrl);
             // If a loading state is replaced by another loading state, do not notify this change.
             if (mNativePage != null) {
                 mNativePage.onStateChange(state.mUrl, false);
@@ -494,9 +489,8 @@ public class BookmarkManager
 
     @Override
     public void openBookmark(BookmarkId bookmark) {
-        if (BookmarkUtils.openBookmark(
-                    mContext, mOpenBookmarkComponentName, mBookmarkModel, bookmark)) {
-            BookmarkUtils.finishActivityOnPhone(mContext);
+        if (BookmarkUtils.openBookmark(mBookmarkModel, mActivity, bookmark)) {
+            BookmarkUtils.finishActivityOnPhone(mActivity);
         }
     }
 
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkPage.java b/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkPage.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkPage.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkPage.java
@@ -4,12 +4,10 @@
 
 package org.chromium.chrome.browser.bookmarks;
 
-import android.content.ComponentName;
-
 import androidx.annotation.VisibleForTesting;
 
 import org.chromium.chrome.R;
-import org.chromium.chrome.browser.ui.messages.snackbar.SnackbarManager;
+import org.chromium.chrome.browser.app.ChromeActivity;
 import org.chromium.chrome.browser.ui.native_page.BasicNativePage;
 import org.chromium.chrome.browser.ui.native_page.NativePageHost;
 import org.chromium.components.embedder_support.util.UrlConstants;
@@ -23,16 +21,13 @@ public class BookmarkPage extends BasicNativePage {
 
     /**
      * Create a new instance of the bookmarks page.
-     * @param componentName The current activity component, used to open bookmarks.
-     * @param snackbarManager Allows control over the app snackbar.
      * @param activity The activity to get context and manage fragments.
      * @param host A NativePageHost to load urls.
      */
-    public BookmarkPage(
-            ComponentName componentName, SnackbarManager snackbarManager, NativePageHost host) {
+    public BookmarkPage(ChromeActivity activity, NativePageHost host) {
         super(host);
 
-        mManager = new BookmarkManager(host.getContext(), componentName, false, snackbarManager);
+        mManager = new BookmarkManager(activity, false, activity.getSnackbarManager());
         mManager.setBasicNativePage(this);
         mTitle = host.getContext().getResources().getString(R.string.bookmarks);
 
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkUndoController.java b/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkUndoController.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkUndoController.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkUndoController.java
@@ -16,7 +16,8 @@ import org.chromium.chrome.browser.ui.messages.snackbar.SnackbarManager;
 import java.util.Locale;
 
 /**
- * Shows an undo bar when the user modifies bookmarks, allowing them to undo their changes.
+ * Shows an undo bar when the user modifies bookmarks,
+ * allowing them to undo their changes.
  */
 public class BookmarkUndoController extends BookmarkModelObserver implements
         SnackbarManager.SnackbarController, BookmarkDeleteObserver {
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkUtils.java b/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkUtils.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkUtils.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/bookmarks/BookmarkUtils.java
@@ -336,16 +336,17 @@ public class BookmarkUtils {
 
     /**
      * Opens a bookmark and reports UMA.
-     * @param context The current context used to launch the intent.
-     * @param openBookmarkComponentName The component to use when opening a bookmark.
      * @param model Bookmarks model to manage the bookmark.
+     * @param activity Activity requesting to open the bookmark.
      * @param bookmarkId ID of the bookmark to be opened.
      * @return Whether the bookmark was successfully opened.
      */
-    public static boolean openBookmark(Context context, ComponentName openBookmarkComponentName,
-            BookmarkModel model, BookmarkId bookmarkId) {
+    public static boolean openBookmark(
+            BookmarkModel model, Activity activity, BookmarkId bookmarkId) {
         if (model.getBookmarkById(bookmarkId) == null) return false;
 
+        String url = model.getBookmarkById(bookmarkId).getUrl();
+
         RecordUserAction.record("MobileBookmarkManagerEntryOpened");
         RecordHistogram.recordEnumeratedHistogram(
                 "Bookmarks.OpenBookmarkType", bookmarkId.getType(), BookmarkType.LAST + 1);
@@ -353,9 +354,9 @@ public class BookmarkUtils {
         BookmarkItem bookmarkItem = model.getBookmarkById(bookmarkId);
         if (bookmarkItem.getId().getType() == BookmarkType.READING_LIST) {
             model.setReadStatusForReadingList(bookmarkItem.getUrl(), true);
-            openUrlInCustomTab(context, bookmarkItem.getUrl());
+            openUrlInCustomTab(activity, bookmarkItem.getUrl());
         } else {
-            openUrl(context, bookmarkItem.getUrl(), openBookmarkComponentName);
+            openUrl(activity, bookmarkItem.getUrl(), activity.getComponentName());
         }
         return true;
     }
@@ -383,10 +384,10 @@ public class BookmarkUtils {
                                                    : R.color.default_icon_color_tint_list;
     }
 
-    private static void openUrl(Context context, String url, ComponentName componentName) {
+    private static void openUrl(Activity activity, String url, ComponentName componentName) {
         Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(url));
-        intent.putExtra(
-                Browser.EXTRA_APPLICATION_ID, context.getApplicationContext().getPackageName());
+        intent.putExtra(Browser.EXTRA_APPLICATION_ID,
+                activity.getApplicationContext().getPackageName());
         intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
         intent.putExtra(IntentHandler.EXTRA_PAGE_TRANSITION_TYPE, PageTransition.AUTO_BOOKMARK);
 
@@ -396,13 +397,13 @@ public class BookmarkUtils {
             // If the bookmark manager is shown in a tab on a phone (rather than in a separate
             // activity) the component name may be null. Send the intent through
             // ChromeLauncherActivity instead to avoid crashing. See crbug.com/615012.
-            intent.setClass(context.getApplicationContext(), ChromeLauncherActivity.class);
+            intent.setClass(activity, ChromeLauncherActivity.class);
         }
 
         IntentHandler.startActivityForTrustedIntent(intent);
     }
 
-    private static void openUrlInCustomTab(Context context, String url) {
+    private static void openUrlInCustomTab(Activity activity, String url) {
         CustomTabsIntent.Builder builder = new CustomTabsIntent.Builder();
         builder.setShowTitle(true);
         builder.setShareState(CustomTabsIntent.SHARE_STATE_ON);
@@ -410,9 +411,10 @@ public class BookmarkUtils {
         customTabIntent.intent.setData(Uri.parse(url));
 
         Intent intent = LaunchIntentDispatcher.createCustomTabActivityIntent(
-                context, customTabIntent.intent);
-        intent.setPackage(context.getPackageName());
-        intent.putExtra(Browser.EXTRA_APPLICATION_ID, context.getPackageName());
+                activity.getApplicationContext(), customTabIntent.intent);
+        intent.setPackage(activity.getApplicationContext().getPackageName());
+        intent.putExtra(Browser.EXTRA_APPLICATION_ID,
+                activity.getApplicationContext().getPackageName());
         intent.putExtra(CustomTabIntentDataProvider.EXTRA_UI_TYPE, CustomTabsUiType.READ_LATER);
         intent.putExtra(IntentHandler.EXTRA_OPEN_NEW_INCOGNITO_TAB,
                 Profile.getLastUsedRegularProfile().isOffTheRecord());
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/native_page/NativePageFactory.java b/chrome/android/java/src/org/chromium/chrome/browser/native_page/NativePageFactory.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/native_page/NativePageFactory.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/native_page/NativePageFactory.java
@@ -94,8 +94,7 @@ public class NativePageFactory {
         }
 
         protected NativePage buildBookmarksPage(Tab tab) {
-            return new BookmarkPage(mActivity.getComponentName(), mActivity.getSnackbarManager(),
-                    new TabShim(tab, mActivity));
+            return new BookmarkPage(mActivity, new TabShim(tab, mActivity));
         }
 
         protected NativePage buildDownloadsPage(Tab tab) {
-- 
2.17.1

