From: csagan5 <32685696+csagan5@users.noreply.github.com>
Date: Wed, 15 May 2019 17:08:35 +0200
Subject: Remove recent tabs signin

---
 .../chrome/browser/signin/SigninManager.java       | 74 ++--------------------
 1 file changed, 7 insertions(+), 67 deletions(-)

diff --git a/chrome/android/java/src/org/chromium/chrome/browser/signin/SigninManager.java b/chrome/android/java/src/org/chromium/chrome/browser/signin/SigninManager.java
--- a/chrome/android/java/src/org/chromium/chrome/browser/signin/SigninManager.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/signin/SigninManager.java
@@ -29,11 +29,7 @@ import org.chromium.base.metrics.RecordUserAction;
 import org.chromium.base.task.PostTask;
 import org.chromium.chrome.browser.externalauth.ExternalAuthUtils;
 import org.chromium.chrome.browser.externalauth.UserRecoverableErrorHandler;
-import org.chromium.components.signin.AccountIdProvider;
 import org.chromium.components.signin.AccountManagerFacade;
-import org.chromium.components.signin.AccountTrackerService;
-import org.chromium.components.signin.ChromeSigninController;
-import org.chromium.components.sync.AndroidSyncSettings;
 import org.chromium.content_public.browser.UiThreadTaskTraits;
 
 import java.util.ArrayList;
@@ -49,7 +45,7 @@ import java.util.List;
  * <p/>
  * See chrome/browser/signin/signin_manager_android.h for more details.
  */
-public class SigninManager implements AccountTrackerService.OnSystemAccountsSeededListener {
+public class SigninManager {
     private static final String TAG = "SigninManager";
 
     /**
@@ -182,8 +178,6 @@ public class SigninManager implements AccountTrackerService.OnSystemAccountsSeed
 
     private final long mNativeSigninManagerAndroid;
     private final Context mContext;
-    private final AccountTrackerService mAccountTrackerService;
-    private final AndroidSyncSettings mAndroidSyncSettings;
     private final ObserverList<SignInStateObserver> mSignInStateObservers = new ObserverList<>();
     private final ObserverList<SignInAllowedObserver> mSignInAllowedObservers =
             new ObserverList<>();
@@ -227,26 +221,18 @@ public class SigninManager implements AccountTrackerService.OnSystemAccountsSeed
     }
 
     private SigninManager() {
-        this(ContextUtils.getApplicationContext(),
-                IdentityServicesProvider.getAccountTrackerService(), AndroidSyncSettings.get());
+        this(ContextUtils.getApplicationContext());
     }
 
     @VisibleForTesting
-    SigninManager(Context context, AccountTrackerService accountTrackerService,
-            AndroidSyncSettings androidSyncSettings) {
+    SigninManager(Context context) {
         ThreadUtils.assertOnUiThread();
         assert context != null;
-        assert accountTrackerService != null;
-        assert androidSyncSettings != null;
         mContext = context;
-        mAccountTrackerService = accountTrackerService;
-        mAndroidSyncSettings = androidSyncSettings;
 
         mNativeSigninManagerAndroid = SigninManagerJni.get().init(this);
         mSigninAllowedByPolicy =
                 SigninManagerJni.get().isSigninAllowedByPolicy(this, mNativeSigninManagerAndroid);
-
-        mAccountTrackerService.addSystemAccountsSeededListener(this);
     }
 
     /**
@@ -282,8 +268,7 @@ public class SigninManager implements AccountTrackerService.OnSystemAccountsSeed
      * Returns true if signin can be started now.
      */
     public boolean isSignInAllowed() {
-        return !mFirstRunCheckIsPending && mSignInState == null && mSigninAllowedByPolicy
-                && ChromeSigninController.get().getSignedInUser() == null && isSigninSupported();
+	return false;
     }
 
     /**
@@ -298,15 +283,14 @@ public class SigninManager implements AccountTrackerService.OnSystemAccountsSeed
      *         Google Play Services installed.
      */
     public boolean isSigninSupported() {
-        return !ApiCompatibilityUtils.isDemoUser(mContext)
-                && !ExternalAuthUtils.getInstance().isGooglePlayServicesMissing(mContext);
+        return false;
     }
 
     /**
      * @return Whether force sign-in is enabled by policy.
      */
     public boolean isForceSigninEnabled() {
-        return SigninManagerJni.get().isForceSigninEnabled(this, mNativeSigninManagerAndroid);
+        return false;
     }
 
     /**
@@ -340,27 +324,6 @@ public class SigninManager implements AccountTrackerService.OnSystemAccountsSeed
     }
 
     /**
-    * Continue pending sign in after system accounts have been seeded into AccountTrackerService.
-    */
-    @Override
-    public void onSystemAccountsSeedingComplete() {
-        if (mSignInState != null && mSignInState.mBlockedOnAccountSeeding) {
-            mSignInState.mBlockedOnAccountSeeding = false;
-            progressSignInFlowCheckPolicy();
-        }
-    }
-
-    /**
-    * Clear pending sign in when system accounts in AccountTrackerService were refreshed.
-    */
-    @Override
-    public void onSystemAccountsChanged() {
-        if (mSignInState != null) {
-            abortSignIn();
-        }
-    }
-
-    /**
      * Starts the sign-in flow, and executes the callback when finished.
      *
      * If an activity is provided, it is considered an "interactive" sign-in and the user can be
@@ -415,19 +378,7 @@ public class SigninManager implements AccountTrackerService.OnSystemAccountsSeed
     }
 
     private void progressSignInFlowSeedSystemAccounts() {
-        if (mAccountTrackerService.checkAndSeedSystemAccounts()) {
-            progressSignInFlowCheckPolicy();
-        } else if (AccountIdProvider.getInstance().canBeUsed()) {
-            mSignInState.mBlockedOnAccountSeeding = true;
-        } else {
-            Activity activity = mSignInState.mActivity;
-            UserRecoverableErrorHandler errorHandler = activity != null
-                    ? new UserRecoverableErrorHandler.ModalDialog(activity, !isForceSigninEnabled())
-                    : new UserRecoverableErrorHandler.SystemNotification();
-            ExternalAuthUtils.getInstance().canUseGooglePlayServices(errorHandler);
-            Log.w(TAG, "Cancelling the sign-in process as Google Play services is unavailable");
-            abortSignIn();
-        }
+        mSignInState.mBlockedOnAccountSeeding = true;
     }
 
     /**
@@ -493,12 +444,6 @@ public class SigninManager implements AccountTrackerService.OnSystemAccountsSeed
         SigninManagerJni.get().onSignInCompleted(
                 this, mNativeSigninManagerAndroid, mSignInState.mAccount.name);
 
-        // Cache the signed-in account name. This must be done after the native call, otherwise
-        // sync tries to start without being signed in natively and crashes.
-        ChromeSigninController.get().setSignedInAccountName(mSignInState.mAccount.name);
-        mAndroidSyncSettings.updateAccount(mSignInState.mAccount);
-        mAndroidSyncSettings.enableChromeSync();
-
         if (mSignInState.mCallback != null) {
             mSignInState.mCallback.onSignInComplete();
         }
@@ -674,16 +619,11 @@ public class SigninManager implements AccountTrackerService.OnSystemAccountsSeed
         // Should be set at beginning of sign-out flow.
         assert mSignOutState != null;
 
-        ChromeSigninController.get().setSignedInAccountName(null);
-        mAndroidSyncSettings.updateAccount(null);
-
         if (mSignOutState.mManagementDomain != null) {
             wipeProfileData();
         } else {
             wipeGoogleServiceWorkerCaches();
         }
-
-        mAccountTrackerService.invalidateAccountSeedStatus(true);
     }
 
     private void wipeProfileData() {
-- 
2.11.0

